import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import api from "../api/axios";
import { useAuth } from "../admin/AuthContext";
import { EbookModal } from "../components/EbookModal";
import Lenis from '@studio-freight/lenis'
import CustomCursor from "../components/CustomCursor";

export default function EbooksStore() {
  const [ebooks, setEbooks] = useState([]);
  const [loadingBook, setLoadingBook] = useState(null);
  const [selectedEbook, setSelectedEbook] = useState(null);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();

  useEffect(() => {
    const fetchEbooks = async () => {
      try {
        const res = await api.get("/ebooks");
        setEbooks(res.data);
      } catch (err) {
        console.error("Failed to fetch ebooks:", err);
        toast.error("Failed to load ebooks");
      } finally {
        setLoading(false);
      }
    };
    fetchEbooks();
  }, []);

  useEffect(() => {
    const lenis = new Lenis({
      duration: 1.4, // slightly longer glide
      easing: (t) => 1 - Math.pow(1 - t, 3), // cubic ease-out (natural feel)
      direction: 'vertical', // default
      gestureDirection: 'vertical',
      smooth: true,
      smoothTouch: true,
      touchMultiplier: 1.5, // faster on touch devices
      wheelMultiplier: 1, // standard speed for mouse wheel
      infinite: false, // disables looping
    })
  
    function raf(time) {
      lenis.raf(time)
      requestAnimationFrame(raf)
    }
  
    requestAnimationFrame(raf)
  
    // optional: for scroll-linked animations
    lenis.on('scroll', ({ scroll, limit, velocity, direction, progress }) => {

    })
  
    return () => lenis.destroy()
  }, [])

  const handleSelectEbook = async (book) => {
    try {
      setLoadingBook(book.product_type);
      const token = localStorage.getItem("accessToken");

      const res = await api.post(
        "/ebooks/checkout",
        {
          userId: user?.id || null, // optional for guests
          title: book.title,
          description: book.description,
          price: book.price,
          productType: book.product_type,
        },
        token ? { headers: { Authorization: `Bearer ${token}` } } : {}
      );

      window.location.href = res.data.url;
    } catch (err) {
      console.error("Checkout error:", err.response?.data || err.message);
      toast.error("Failed to start checkout session");
      setLoadingBook(null);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center text-gray-400">
        Loading ebooks...
      </div>
    );
  }

  if (ebooks.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center text-gray-400">
        No ebooks available yet.
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-black via-gray-900 to-black text-white flex flex-col items-center px-6 py-20">
      <CustomCursor />
      <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-extrabold mb-12 tracking-tight text-center lead-text">
  Shop Our <span className="text-green design-text">Premium Guides</span>
</h1>

      <p className="text-gray-400 text-center max-w-2xl mb-16 leading-relaxed">
        Professionally written, conversion-focused guides generated by our
        software Cre8tly Studio. Instantly downloadable after purchase, no
        subscriptions, just pure value.
      </p>

      {/* ====== Ebook Grid ====== */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 w-full max-w-7xl">
  {ebooks.map((book) => {
    return (
      <div
        key={book.id}
        className="relative rounded-3xl p-[2px] bg-gradient-to-r from-[#9ca3af] via-[#f3f4f6] to-[#9ca3af]
        shadow-[0_0_25px_rgba(255,255,255,0.15)] hover:shadow-[0_0_45px_rgba(255,255,255,0.35)]
        transition-all duration-300"
      >
        {/* ====== Card Body ====== */}
        <div className="rounded-3xl bg-gradient-to-b from-[#1a1a1a] via-[#111111] to-[#0b0b0b] p-8 flex flex-col text-center shadow-[inset_0_0_20px_rgba(255,255,255,0.05)] min-h-[550px] relative overflow-hidden group">
          
          {/* Chrome shimmer overlay */}
          <div className="absolute inset-0 bg-[linear-gradient(120deg,rgba(255,255,255,0.05)_0%,rgba(255,255,255,0.15)_40%,rgba(255,255,255,0)_60%)] opacity-0 group-hover:opacity-100 transition-opacity duration-700 pointer-events-none" />

          {/* Cover image */}
          <div className="flex justify-center mb-6 relative">
            <img
              src={book.image_url}
              alt={book.title}
              className="rounded-lg w-48 h-auto object-contain border border-gray-700 shadow-[0_4px_20px_rgba(0,0,0,0.4)]"
            />
          </div>

          {/* Title */}
          <h2 className="text-2xl font-semibold mb-3 text-white min-h-[64px] flex items-center justify-center">
            {book.title}
          </h2>

          {/* Short description */}
          <div
            className="text-gray-300 mb-5 text-sm leading-relaxed line-clamp-3 text-left"
            dangerouslySetInnerHTML={{ __html: book.description }}
          />

          <button
            onClick={() => setSelectedEbook(book)}
            className="text-gray-400 text-sm hover:text-white hover:underline mb-4 transition-colors"
          >
            Read More
          </button>

          {/* ====== Price & Button ====== */}
          <div className="mt-auto">
            <p className="text-3xl font-extrabold mb-5 text-white tracking-wide drop-shadow-[0_0_5px_rgba(255,255,255,0.2)]">
              ${book.price}
            </p>

            <button
              onClick={() => handleSelectEbook(book)}
              disabled={loadingBook === book.product_type}
              className={`w-full py-3 px-6 text-lg font-semibold rounded-xl transition-all duration-300 
                ${loadingBook === book.product_type
                  ? "opacity-50 cursor-not-allowed bg-gray-700"
                  : "bg-gradient-to-r from-[#d1d5db] to-[#9ca3af] text-black hover:from-white hover:to-gray-300 hover:shadow-[0_0_35px_rgba(255,255,255,0.5)]"
                }`}
            >
              {loadingBook === book.product_type
                ? "Redirecting..."
                : "Purchase Guide"}
            </button>
          </div>
        </div>
      </div>
    );
  })}
</div>


      <p className="text-gray-500 text-sm mt-12 text-center">
        ðŸ”’ Secure Checkout
      </p>

      {selectedEbook && (
        <EbookModal
          ebook={selectedEbook}
          onClose={() => setSelectedEbook(null)}
          onBuy={handleSelectEbook}
          loadingBook={loadingBook}
        />
      )}
    </div>
  );
}
