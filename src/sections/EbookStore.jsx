import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import api from "../api/axios";
import { useAuth } from "../admin/AuthContext";
import { EbookModal } from "../components/EbookModal";

export default function EbooksStore() {
  const [ebooks, setEbooks] = useState([]);
  const [loadingBook, setLoadingBook] = useState(null);
  const [selectedEbook, setSelectedEbook] = useState(null);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();

  useEffect(() => {
    const fetchEbooks = async () => {
      try {
        const res = await api.get("/ebooks");
        setEbooks(res.data);
      } catch (err) {
        console.error("Failed to fetch ebooks:", err);
        toast.error("Failed to load ebooks");
      } finally {
        setLoading(false);
      }
    };
    fetchEbooks();
  }, []);

  const handleSelectEbook = async (book) => {
    try {
      setLoadingBook(book.product_type);
      const token = localStorage.getItem("accessToken");

      const res = await api.post(
        "/ebooks/checkout",
        {
          userId: user?.id || null, // optional for guests
          title: book.title,
          description: book.description,
          price: book.price,
          productType: book.product_type,
        },
        token ? { headers: { Authorization: `Bearer ${token}` } } : {}
      );

      window.location.href = res.data.url;
    } catch (err) {
      console.error("Checkout error:", err.response?.data || err.message);
      toast.error("Failed to start checkout session");
      setLoadingBook(null);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center text-gray-400">
        Loading ebooks...
      </div>
    );
  }

  if (ebooks.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center text-gray-400">
        No ebooks available yet.
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-black via-gray-900 to-black text-white flex flex-col items-center px-6 py-20">
      <h1 className="text-5xl font-extrabold mb-12 tracking-tight text-center">
        Shop Our <span className="text-headerGreen">Premium Guides</span>
      </h1>

      <p className="text-gray-400 text-center max-w-2xl mb-16 leading-relaxed">
        Professionally written, conversion-focused guides generated by our
        software Cre8tly Studio. Instantly downloadable after purchase, no
        subscriptions, just pure value.
      </p>

      {/* ====== Ebook Grid ====== */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-10 w-full max-w-7xl">
        {ebooks.map((book) => {
          const borderGradient =
            book.color === "green"
              ? "from-green-500 via-emerald-400 to-green-500 shadow-[0_0_25px_rgba(0,255,153,0.3)] hover:shadow-[0_0_45px_rgba(0,255,153,0.6)]"
              : book.color === "purple"
              ? "from-purple-600 via-blue-500 to-purple-600 shadow-[0_0_25px_rgba(147,51,234,0.4)] hover:shadow-[0_0_45px_rgba(147,51,234,0.7)]"
              : "from-blue-600 via-cyan-400 to-blue-600 shadow-[0_0_25px_rgba(56,189,248,0.3)] hover:shadow-[0_0_45px_rgba(56,189,248,0.6)]";

          return (
            <div
              key={book.id}
              className={`relative rounded-3xl p-[2px] bg-gradient-to-r ${borderGradient}`}
            >
              {/* ====== Card ====== */}
              <div className="rounded-3xl bg-gradient-to-b from-gray-900 to-gray-800 p-8 flex flex-col text-center shadow-[0_0_25px_rgba(0,0,0,0.4)] min-h-[550px]">
                <div className="flex flex-col flex-1 justify-between">
                  {/* Cover image */}
                  <div className="flex justify-center mb-6">
                    <img
                      src={book.image_url}
                      alt={book.title}
                      className="rounded-lg w-48 h-auto object-contain border border-gray-700 shadow-md"
                    />
                  </div>

                  {/* Title */}
                  <h2 className="text-2xl font-semibold mb-3 text-white min-h-[64px] flex items-center justify-center">
                    {book.title}
                  </h2>

                  {/* Short description */}
                  <div
                    className="text-gray-300 mb-5 text-sm leading-relaxed line-clamp-3 text-left"
                    dangerouslySetInnerHTML={{ __html: book.description }}
                  />

                  <button
                    onClick={() => setSelectedEbook(book)}
                    className="text-headerGreen text-sm hover:underline mb-4"
                  >
                    Read More
                  </button>
                </div>

                {/* ====== Price & Locked Button ====== */}
                <div className="mt-auto">
                  <p className="text-3xl font-extrabold mb-5 text-white">
                    ${book.price}
                  </p>

                  <button
                    onClick={() => handleSelectEbook(book)}
                    disabled={loadingBook === book.product_type}
                    className={`w-full py-3 px-6 text-lg font-semibold rounded-xl transition-all duration-300 shadow-lg ${
                      loadingBook === book.product_type
                        ? "opacity-50 cursor-not-allowed bg-gray-700"
                        : "bg-royalPurple hover:bg-headerGreen hover:shadow-[0_0_25px_rgba(0,255,153,0.6)] text-white"
                    }`}
                  >
                    {loadingBook === book.product_type
                      ? "Redirecting..."
                      : "Purchase Guide"}
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <p className="text-gray-500 text-sm mt-12 text-center">
        ðŸ”’ Secure Checkout
      </p>

      {selectedEbook && (
        <EbookModal
          ebook={selectedEbook}
          onClose={() => setSelectedEbook(null)}
          onBuy={handleSelectEbook}
          loadingBook={loadingBook}
        />
      )}
    </div>
  );
}
